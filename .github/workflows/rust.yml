name: Rust CI

on:
  push:
  schedule:
    - cron: '0 0 * * *'

env:
  CARGO_TERM_COLOR: always

# See: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency.
# This will ensure that only one commit will be running tests at a time on each PR.
concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        rust: [ "stable", "nightly", "1.71" ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        features: [ "default", "byte", "64", "word_sse41" ]
        include:
          - target-cpu: x86-64
          - features: word_sse41
            target-cpu: sandybridge

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-debug-${{ hashFiles('**/Cargo.toml') }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Install matching LLVM
        run: |
          wget --no-check-certificate -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main'
          sudo apt update
          sudo apt upgrade -y
          sudo apt install -y llvm-17-dev
          sudo apt remove -y llvm-14-dev libclang-common-14-dev libclang-common-13-dev libclang-common-11-dev
        if: matrix.os == 'ubuntu-latest'

      - name: Build
        run: cargo +${{ matrix.rust }} build --features=${{ matrix.features }}
        env:
          RUSTFLAGS: -Ctarget-cpu=${{ matrix.target-cpu }}

      - name: Test
        run: cargo +${{ matrix.rust }} test --features=${{ matrix.features }}
        env:
          RUSTFLAGS: -Ctarget-cpu=${{ matrix.target-cpu }}

  clippy:
    runs-on: ubuntu-latest
    needs: [ "build" ]
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-debug-${{ hashFiles('**/Cargo.toml') }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@beta
        with:
          components: clippy

      - name: Run clippy
        run: cargo clippy -- -Dclippy::all

  rustfmt:
    runs-on: ubuntu-latest
    needs: [ "build" ]
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-debug-${{ hashFiles('**/Cargo.toml') }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt

      - name: Run fmt
        run: cargo fmt --all -- --check
